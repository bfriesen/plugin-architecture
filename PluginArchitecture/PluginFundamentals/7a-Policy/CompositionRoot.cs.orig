using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Ninject;
using Ninject.Extensions.Conventions;
using _7b_Abstraction;

namespace _7a_Policy
{
    public class CompositionRoot
    {
        private IKernel container;

        public CompositionRoot()
        {
            container = new StandardKernel();

            // Doesn't work! No reference to Rot13 anywhere.
            //container.Bind<IEncryptionAlgorithm>().To<Rot13>();

            string pluginsPath = Path.Combine(Path.GetDirectoryName(new Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath), "plugins\\");

            if (!Directory.Exists(pluginsPath)) Directory.CreateDirectory(pluginsPath);
            // Requires Ninject.Extensions.Conventions

            container.Bind(x => x.FromAssembliesInPath(pluginsPath) // For each assembly (.dll/.exe) in folder
                .SelectAllClasses() // Select every class in every assembly
                .InheritedFrom<IEncryptionAlgorithm>() // And for any classes that implement IEncryptionAlgorithm
                .BindAllInterfaces() // do Bind<IEncryptionAlgorithm>().To<ThoseClasses>();
            );

            List<IEncryptionAlgorithm> allPlugins = container.GetAll<IEncryptionAlgorithm>().ToList();
            IEncryptionAlgorithm firstPlugin = allPlugins.First();
            container.Rebind<IEncryptionAlgorithm>().ToConstant(firstPlugin);
        }

        public ConsoleEncrypter GetConsoleEncrypter()
        {
            return container.Get<ConsoleEncrypter>();
        }
    }
}


#region Container Configuration
//string pluginsPath = Path.Combine(Path.GetDirectoryName(new Uri(Assembly.GetExecutingAssembly().CodeBase).LocalPath), "plugins\\");

//if (!Directory.Exists(pluginsPath)) Directory.CreateDirectory(pluginsPath);
//// Requires Ninject.Extensions.Conventions

//container.Bind(x => x.FromAssembliesInPath(pluginsPath) // For each assembly (.dll/.exe) in folder
//    .SelectAllClasses() // Select every class in every assembly
//    .InheritedFrom<IEncryptionAlgorithm>() // And for any classes that implement IEncryptionAlgorithm
//    .BindAllInterfaces() // do Bind<IEncryptionAlgorithm>().To<ThoseClasses>();
//);

//List<IEncryptionAlgorithm> allPlugins = container.GetAll<IEncryptionAlgorithm>().ToList();
//IEncryptionAlgorithm firstPlugin = allPlugins.First();
//container.Rebind<IEncryptionAlgorithm>().ToConstant(firstPlugin);
#endregion